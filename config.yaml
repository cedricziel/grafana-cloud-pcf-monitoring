extensions:
  basicauth/metrics:
    client_auth:
      username: "${GRAFANA_USER_ID}"
      password: "${GRAFANA_TOKEN}"
  memory_ballast:
    # The ballast should be configured to be 1/3 to 1/2 of the memory allocated to the collector.
    size_mib: 750

exporters:
  prometheusremotewrite:
    endpoint: ${GRAFANA_REMOTE_WRITE_URL}
    auth:
      authenticator: basicauth/metrics

processors:
  batch:
  memory_limiter:
    check_interval: 1s
    # Maximum amount of memory, in MiB, targeted to be allocated by the process heap.
    # Note that typically the total memory usage of process will be about 50MiB higher than this value.
    # This defines the hard limit.
    limit_mib: 1800
  resource:
    attributes:
    - key: grafana.cf.env
      value: ${CF_CLUSTER}
      action: upsert

receivers:
  cloudfoundry:
    rlp_gateway:
      endpoint: ${RLP_GATEWAY_ENDPOINT}
      shard_id: opentelemetry
      tls:
        insecure_skip_verify: ${RLP_GATEWAY_TLS_INSECURE}
    uaa:
      endpoint: ${UAA_ENDPOINT}
      username: ${UAA_USERNAME}
      password: ${UAA_PASSWORD}
      tls:
        insecure_skip_verify: ${UAA_TLS_INSECURE}
  # Otel-Collector Self-Diagnostics
  prometheus:
    config:
      scrape_configs:
        - job_name: "pcf-grafana-otel-collector"
          scrape_interval: 5s
          static_configs:
            - targets: ["localhost:8888"]

service:
  extensions: [ basicauth/metrics,  memory_ballast ]
  pipelines:
    metrics:
      receivers:  [ cloudfoundry, prometheus ]
      processors: [ memory_limiter, batch ]
      exporters:  [ prometheusremotewrite ]
  # Otel-Collector Self-Diagnostics
  telemetry:
    logs:
      level: info
      encoding: json
      output_paths: ["stdout"]
      error_output_paths: ["stdout"]
    metrics:
      address: localhost:8888
